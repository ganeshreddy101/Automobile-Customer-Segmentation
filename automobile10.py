# -*- coding: utf-8 -*-
"""automobile10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NlxMe7nF094jeAx4aZOY77LgPk3o276N
"""

import joblib
model = joblib.load('model3.pkl')

import pandas as pd
df = pd.read_csv("automobiles.csv")

import os
import joblib

model_file = 'model3.pkl'  # Adjust path as needed

if os.path.exists(model_file):
    model = joblib.load(model_file)
    print("Model loaded successfully!")
else:
    print(f"Model file {model_file} not found. Training new model...")
    # Train your model here or use the code I provided above

import streamlit as st
import pandas as pd
import joblib
import os
import numpy as np

# Page configuration
st.set_page_config(page_title="Customer Segmentation", layout="centered")
st.title("ðŸš— Automobile Customer Segmentation")
st.write("Enter customer details below to predict the appropriate segment.")

# Load the trained model with error handling
@st.cache_resource
def load_model():
    try:
        model = joblib.load("model3.pkl")
        return model, None
    except FileNotFoundError:
        return None, "Model file 'model3.pkl' not found. Please ensure the model file is in the same directory."
    except Exception as e:
        return None, f"Error loading model: {str(e)}"

model, error_msg = load_model()

if error_msg:
    st.error(error_msg)
    st.stop()

# Segment mapping
segment_map = {0: "A", 1: "BC (merged)", 2: "D"}

# Create columns for better layout
col1, col2 = st.columns(2)

with col1:
    # User Inputs - Basic Demographics
    st.subheader("Customer Demographics")
    age = st.number_input("Age", min_value=10, max_value=100, value=30, help="Customer's age in years")
    gender = st.selectbox("Gender", ["Male", "Female"], help="Customer's gender")
    ever_married = st.selectbox("Ever Married", ["No", "Yes"], help="Marital status")
    graduated = st.selectbox("Graduated", ["No", "Yes"], help="Education level")

with col2:
    # User Inputs - Professional & Behavioral
    st.subheader("Professional Details")
    profession = st.selectbox("Profession",
                             ["Healthcare", "Engineer", "Lawyer", "Artist", "Doctor",
                              "Homemaker", "Entertainment", "Marketing", "Executive"],
                             help="Customer's profession")
    work_exp = st.slider("Work Experience (Years)", 0, 40, 2, help="Years of work experience")
    spending_score = st.slider("Spending Score (0â€“100)", 0, 100, 50,
                              help="Customer's spending behavior score")
    family_size = st.number_input("Family Size", min_value=1, max_value=10, value=3,
                                 help="Number of family members")

# Additional feature (if Var_1 exists in your model)
st.subheader(" Additional Information")
var_1 = st.slider("Var_1", 0, 10, 5, help="Additional customer variable")

# Convert categorical inputs to match your model's expected format
def preprocess_inputs(age, gender, ever_married, graduated, profession, work_exp, spending_score, family_size, var_1):
    """Convert user inputs to model-ready format with correct encoding"""

    gender_map = {'Male': 1, 'Female': 0}
    married_map = {'Yes': 1, 'No': 0}
    grad_map = {'Yes': 1, 'No': 0}
    profession_map = {
        'Artist': 0, 'Doctor': 1, 'Engineer': 2, 'Entertainment': 3,
        'Executive': 4, 'Healthcare': 5, 'Homemaker': 6, 'Lawyer': 7, 'Marketing': 8
    }

    input_data = {
        'Age': age,
        'Gender': gender_map.get(gender, 0),
        'Ever_Married': married_map.get(ever_married, 0),
        'Graduated': grad_map.get(graduated, 0),
        'Profession': profession_map.get(profession, 0),
        'Work_Experience': work_exp,
        'Spending_Score': spending_score,
        'Family_Size': family_size,
        'Var_1': var_1  # Assuming this is already numeric
    }

    return pd.DataFrame([input_data])

# Segment descriptions for better user understanding
segment_descriptions = {
    "A": {
        "title": "Customer Segment A",
        "description": "This segment represents customers with behavioral patterns similar to those historically labeled A by the company.",
        "characteristics": ["Profile patterns A", "Potentially loyal customers", "Specific buying trends"],
        "color": "blue"
    },
    "BC (merged)": {
        "title": "Customer Segment BC",
        "description": "Merged B and C segments â€” customers with mixed engagement levels and moderate purchase frequency.",
        "characteristics": ["Diverse customer group", "Moderate historical conversion", "Variable product interest"],
        "color": "green"
    },
    "D": {
        "title": "Customer Segment D",
        "description": "Customers with behavioral traits aligned to Segment D as per company classification.",
        "characteristics": ["Strong signal in past data", "Consistent behavioral patterns", "Similar outreach strategy expected"],
        "color": "orange"
    }
}


# Prediction section
st.subheader("Prediction")

if st.button("Predict Customer Segment", type="primary"):
    try:
        # Preprocess inputs
        input_df = preprocess_inputs(age, gender, ever_married, graduated, profession,
                                   work_exp, spending_score, family_size, var_1)

        # Make prediction
        pred = model.predict(input_df)[0]
        pred_proba = model.predict_proba(input_df)[0]

        # Get segment info
        segment_name = segment_map[pred]
        segment_info = segment_descriptions[segment_name]

        # Display results
        st.success(f" **Predicted Segment: {segment_name}**")

        # Show segment description
        st.info(f"**{segment_info['title']}**\n\n{segment_info['description']}")

        # Show characteristics
        st.write("**Key Characteristics:**")
        for char in segment_info['characteristics']:
            st.write(f"â€¢ {char}")

        # Show prediction confidence
        st.subheader(" Prediction Confidence")
        confidence_df = pd.DataFrame({
            'Segment': [f"Segment {segment_map[i]}" for i in range(len(pred_proba))],
            'Probability': pred_proba
        })
        st.bar_chart(confidence_df.set_index('Segment'))

        # Show individual probabilities
        for i, prob in enumerate(pred_proba):
            st.write(f"Segment {segment_map[i]}: {prob:.1%}")

    except Exception as e:
        st.error(f"Error making prediction: {str(e)}")
        st.write("Please check that all inputs are valid and the model is compatible.")

# Add sidebar with information
st.sidebar.header("â„¹About")
st.sidebar.write("""
This application predicts customer segments for automobile industry based on:
- **Demographics**: Age, Gender, Marital Status
- **Professional**: Education, Profession, Work Experience
- **Behavioral**: Spending Score, Family Size
- **Additional**: Custom variables

**Segments:**
- **A**: Premium Mature Customers
- **BC**: Standard Customers (merged segments)
- **D**: Young Premium Customers
""")

st.sidebar.header("ðŸ“Š Model Performance")
st.sidebar.write("""
- **Accuracy**: 63.2%
- **Model**: LightGBM Classifier
- **Classes**: 3 (after merging B & C)
""")

# Footer
st.markdown("---")
st.markdown("Built with Streamlit | Customer Segmentation for Automobile Industry")

